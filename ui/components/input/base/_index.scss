// Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
// Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license

/**
 * @summary Initializes text input
 *
 * @name base
 * @selector .nds-input
 * @restrict input
 * @required
 * @variant
 */
.nds-input {
  @include form-states;
  box-shadow: none;
  display: inline-block;
  padding: 0;
  line-height: $height-input;
  min-height: calc(#{$height-input} + (#{$border-width-thin} * 2)); // For IE
  /**
   * @selector [readonly]
   * @restrict .nds-input
   */
  &[readonly] {
    border-color: transparent;
    background-color: transparent;
    font-size: $input-static-font-size;
    font-weight: $input-readonly-font-weight; // This is a plain readonly input. It should not have the text treatment that static has.
    border-bottom: 1px solid $color-border-input;
  }

  &[type="search"]:-ms-clear {
    display: none;
    width: 0;
    height: 0;
  }

  /**
   * Removes aesthetic nature from an input
   *
   * @selector .nds-input_bare
   * @restrict .nds-input, input, textarea
   * @modifier
   */
  &_bare,
  &--bare {
    background-color: transparent;
    border: 0;
    padding: {
      top: 0;
      bottom: 0;
    }
    color: $color-text-default;
    line-height: $height-input;

    &:focus,
    &:active {
      outline: 0;
      box-shadow: none;
    }
  }

  /**
   * Used to apply an input size to another element thats a non input
   * Because sometimes I need elements the same height as inputs
   *
   * @selector .nds-input_height
   * @restrict .nds-input
   */
  &_height,
  &--height {
    min-height: calc(#{$height-input} + (#{$border-width-thin} * 2)); // For IE
  }

  /**
   * @summary Use on input container to hide placeholder when there's no focus in Microsoft Edge
   *
   * @selector :focus::-ms-input-placeholder
   */
  /* stylelint-disable selector-no-vendor-prefix */
  &::-ms-input-placeholder {
    opacity: 0;
  }

  &::focus:-ms-input-placeholder {
    opacity: 100;
  }
  /* stylelint-enable selector-no-vendor-prefix */
}

.nds-read-only  {
  .nds-input {
    @include form-input-disabled;
  }
  .nds-form-element__label {
    color: $color-text-input-disabled;
    opacity: 0.5;
  }
}

/**
 * @summary Modifier to allow a [readonly] input to have borders
 *
 * @selector .nds-input_borders
 * @restrict .nds-input
 */
.nds-input_borders {
  padding-#{$left}: $spacing-small;
  border-color: $color-border-input;
}

/**
 * @summary Modifier if text input has svg icon adjacent to input
 *
 * @selector .nds-input-has-icon
 * @restrict .nds-form-element div
 */
.nds-input-has-icon {
  position: relative;

  /**
   * Hook for .nds-input-has-icon
   *
   * @selector .nds-input__icon
   * @restrict .nds-input-has-icon svg, .nds-input-has-icon button, .nds-input-has-icon span
   */
  .nds-input__icon {
    @include square($square-icon-medium-content);
    position: absolute;
    top: 50%;
    margin-top: (($square-icon-medium-content * 0.5) * -1);
    line-height: 1;

    /* @Todo - we need to be sure this is deprecated since the color sems to be the correct gray I see in specs */
    @include deprecate('4.0.0', 'Use .nds-icon-text-default on the SVG icon instead') {
      fill: $color-text-input-icon;
    }
  }

  /**
   * Positions .nds-input__icon to the left of the text input
   *
   * @selector .nds-input-has-icon_left
   * @restrict .nds-input-has-icon
   */
  &_left,
  &--left {

    .nds-input,
    .nds-input_bare,
    .nds-input--bare {
      padding-#{$left}: $spacing-large;
    }
  }

  /**
   * Positions .nds-input__icon to the right of the text input
   *
   * @selector .nds-input-has-icon_right
   * @restrict .nds-input-has-icon
   */
  &_right,
  &--right {

    .nds-input__icon {
      #{$right}: 0;
    }

    .nds-input,
    .nds-input_bare,
    .nds-input--bare {
      padding-#{$right}: $spacing-large;
    }
  }

  /**
   * Positions .nds-input__icon_left to the left of the text input and .nds-input__icon_right to the right of the text input
   *
   * @selector .nds-input-has-icon_left-right
   * @restrict .nds-input-has-icon
   */
  &_left-right,
  &--left-right {
    /**
     * Hook for .nds-input-has-icon--left-right
     *
     * @selector .nds-input__icon_left
     * @restrict .nds-input__icon
     */
    .nds-input__icon_left,
    .nds-input__icon--left {
      #{$left}: 0;
    }

    /**
     * Hook for .nds-input-has-icon_left-right
     *
     * @selector .nds-input__icon_right
     * @restrict .nds-input__icon
     */
    .nds-input__icon_right,
    .nds-input__icon--right {
      #{$right}: 0;
    }

    .nds-input,
    .nds-input_bare,
    .nds-input--bare {
      padding: 0 $spacing-large;
    }
  }
}

/**
 * Positions two items (icons and/or spinners) on one side or the other of the input
 *
 * @selector .nds-input__icon-group
 * @restrict .nds-input-has-icon div
 */
.nds-input__icon-group {
  position: absolute;
  height: $square-icon-medium-content;
  margin-top: (($square-icon-medium-content * 0.5) * -1);
}

/**
 * Positions the close icon and spinner on the right side of the input while searching
 *
 * @selector .nds-input__icon-group_right
 * @restrict .nds-input__icon-group
 */
.nds-input__icon-group_right {
  #{$right}: 0;
  top: 50%;

  .nds-input__icon_right,
  .nds-input__icon--right {
    #{$right}: $spacing-x-small;
  }

  .nds-input__spinner {
    #{$right}: if-ltr($spacing-large, $spacing-xx-large);
    #{$left}: auto;
  }
}

/**
 * @summary Use on input container to let it know there is fixed text to the left or right of the input
 *
 * @selector .nds-input-has-fixed-addon
 * @restrict .nds-form-element .nds-form-element__control
 */
.nds-input-has-fixed-addon {
  display: flex;
}

/**
 * Fixed text that sits to the left or right of an input
 *
 * @selector .nds-form-element__addon
 * @restrict .nds-form-element span
 */
.nds-form-element__addon {
  display: inline-block;
  margin: 0 $spacing-x-small;
  align-self: center;
}

/**
 * Read-only components are used to display immutable data within a form
 *
 * @summary Initializes read-only form element
 *
 * @selector .nds-form-element__static
 * @restrict .nds-form-element span, .nds-form-element div
 */
.nds-form-element__static {
  display: inline-block;
  padding-top: $spacing-xx-small;
  padding-bottom: $spacing-xx-small;
  min-height: calc(#{$line-height-button} + 2px); // For IE
  font-size: $input-static-font-size;
  font-weight: $input-static-font-weight;
  color: $input-static-color;

  // If read only state is longform
  // Apply text line height
  &.nds-text-longform {
    line-height: $line-height-text;
  }

  /**
   * Inline Edit on static form element
   *
   * @selector .nds-form-element__static_edit
   * @restrict .nds-form-element__static
   */
  &--edit {
    width: calc(100% - #{$square-icon-small-boundary}); // Leave space for edit icon
  }
}

.nds-has-error {
  @include form-input-error('.nds-input');

  .nds-input__icon {
    fill: $color-text-error;
    color: $color-text-error;
  }
}


.nds-input-has-icon span.nds-form-element__addon {
  margin-#{$left}: 0;
}


@media all and (max-width: 480px) {

  .nds-form--multi-input__container {

    .nds-form-element__control-animated-label.nds-size_2-of-3 {
      width: 50%;
      max-width: 50%;
    }
  }
}

input[type="text"].nds-input_mask.nds-input,
input[type="tel"].nds-input_mask.nds-input {
  color: transparent;
}

input[type="text"].nds-input_mask.nds-input:focus,
input[type="tel"].nds-input_mask.nds-input:focus {
  color: inherit;
  /* stylelint-disable declaration-property-value-blacklist */
  transition: all 0.3s ease-out;
  /* stylelint-enable declaration-property-value-blacklist */
}

input[type="text"].nds-input_mask.nds-input.nds-not-empty,
input[type="tel"].nds-input_mask.nds-input.nds-not-empty {
  color: inherit;
}

.nds-form-container.nds-relative-tooltip {
	display: flex;
	.nds-tooltip_container {
		order: 2;
	}
}
.nds-form-element__control {
	.nds-pill {
		display: block;
	}
}
.nds-file-selector-container {
	height: 35px;
	border-radius: 3px;
	border: 1px solid #d8dde6;
}
.nds-file-selector__files {
	li {
		border-bottom: none;
		border-radius: 0;
		margin: 0;
		.nds-file-selector__remove-file-icon {
			float: right;
		}
		&:first-of-type {
			border-top-left-radius: 3px;
			border-top-right-radius: 3px;
		}
		&:last-of-type {
			border-bottom: 1px solid rgb(221, 219, 218);
			border-bottom-left-radius: 3px;
			border-bottom-right-radius: 3px;
		}
	}
}
.nds-file-selector_input {
	opacity: 0;
	position: absolute;
}
.nds-file-selector_label {
	position: absolute;
	pointer-events: none;
	top: 0.5rem;
	left: .75rem;
	font-weight: 700;
	color: inherit;
	font-size: 14px;
}
.nds-file-selector_icon {
	pointer-events: none;
	position: absolute;
	right: 11px;
	top: 0.5rem;
}
.nds-file-selector__body {
	cursor: pointer;
}
.nds-file-selector__remove-file-icon {
	cursor: pointer;
}
.nds-input__clickable-icon-right {
	right: .75em;
	position: absolute;
	top: 25%;
	cursor: pointer;
}
.nds-input__input-clickable-icon-right {
	padding-right: 2em;
}
.nds-input__clickable-icon-left {
	left: .75em;
	position: absolute;
	top: 25%;
	cursor: pointer;
}
.nds-input__input-clickable-icon-left {
	padding-left: 2em;
}