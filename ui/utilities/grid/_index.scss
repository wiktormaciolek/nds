// Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
// Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license

/**
 * @summary Initializes grid
 *
 * @selector .nds-grid
 * @modifier
 */
.nds-grid {
  display: flex;
}

/**
 * @summary Initializes grid
 *
 * @selector .nds-grid_frame
 * @modifier
 */
.nds-grid_frame,
.nds-grid--frame {
  min-width: 100vw;
  min-height: 100vh;
  overflow: hidden;
}

/**
 * @summary Initializes grid
 *
 * @selector .nds-grid_vertical
 * @modifier
 */
.nds-grid_vertical,
.nds-grid--vertical {
  flex-direction: column;
}

/**
 * @summary Initializes grid
 *
 * @selector .nds-grid_vertical-reverse
 * @modifier
 */
.nds-grid_vertical-reverse,
.nds-grid--vertical-reverse {
  flex-direction: column-reverse;
}

/**
 * @summary Initializes grid
 *
 * @selector .nds-grid_reverse
 * @modifier
 */
.nds-grid_reverse,
.nds-grid--reverse {
  flex-direction: row-reverse;
}

/**
 * @summary Allows columns to wrap when they exceed 100% of their parentâ€™s width
 *
 * @selector .nds-wrap
 * @modifier
 */
.nds-wrap {
  @include flex-wrap(true);
}

/**
 * @summary Keeps columns on one line. Allows columns to stretch and fill 100% of the parent&rsquo;s width and height.
 *
 * @selector .nds-nowrap
 * @modifier
 */
.nds-nowrap {
  @include flex-item(expand);
  @include flex-wrap(false);
}

/**
 * @summary Applies nowrap to white-space property.
 * 
 * @selector .nds-nowrap-whitespace
 * @modifer
 */
.nds-nowrap-whitespace {
  white-space: nowrap;
}

@include deprecate('4.0.0', 'Use .nds-{size}-nowrap instead') {

  .nds-nowrap_small,
  .nds-nowrap--small {
    @include mq-small-min {
      @include flex-item(expand);
      @include flex-wrap(false);
    }
  }

  .nds-nowrap_medium,
  .nds-nowrap--medium {
    @include mq-medium-min {
      @include flex-item(expand);
      @include flex-wrap(false);
    }
  }

  .nds-nowrap_large,
  .nds-nowrap--large {
    @include mq-large-min {
      @include flex-item(expand);
      @include flex-wrap(false);
    }
  }
}

/**
 * @summary .nds-{size}-nowrap used for responsive design
 *
 * @selector [class*='-nowrap']
 * @modifier
 */
@each $size in map-keys($breakpoints) {
  $breakpoint: map-get($breakpoints, $size);

  @each $key in $size {
    @media (min-width: #{pem($breakpoint)}) {

      .nds-#{$size}-nowrap {
        flex: 1 1 auto;
        flex-wrap: nowrap;
        align-items: stretch;
      }
    }
  }
}

/**
 * @summary Normalizes the 0.75rem of padding when nesting a grid in a region with `.nds-p-horizontal_small`
 *
 * @selector .nds-grid_pull-padded
 * @modifier
 */
.nds-grid_pull-padded,
.nds-grid--pull-padded {
  margin: {
    #{$right}: ($spacing-small * -1);
    #{$left}: ($spacing-small * -1);
  }
}

/**
 * @summary Normalizes the 0.125rem of padding when nesting a grid in a region with `.nds-p-horizontal_xxx-small`
 *
 * @selector .nds-grid_pull-padded-xxx-small
 * @modifier
 */
.nds-grid_pull-padded-xxx-small,
.nds-grid--pull-padded-xxx-small {
  margin: {
    #{$right}: ($spacing-xxx-small * -1);
    #{$left}: ($spacing-xxx-small * -1);
  }
}

/**
 * @summary Normalizes the 0.25rem of padding when nesting a grid in a region with `.nds-p-horizontal_xx-small`
 *
 * @selector .nds-grid_pull-padded-xx-small
 * @modifier
 */
.nds-grid_pull-padded-xx-small,
.nds-grid--pull-padded-xx-small {
  margin: {
    #{$right}: ($spacing-xx-small * -1);
    #{$left}: ($spacing-xx-small * -1);
  }
}

/**
 * @summary Normalizes the 0.5rem of padding when nesting a grid in a region with `.nds-p-horizontal_x-small`
 *
 * @selector .nds-grid_pull-padded-x-small
 * @modifier
 */
.nds-grid_pull-padded-x-small,
.nds-grid--pull-padded-x-small {
  margin: {
    #{$right}: ($spacing-x-small * -1);
    #{$left}: ($spacing-x-small * -1);
  }
}

/**
 * @summary Normalizes the 0.75rem of padding when nesting a grid in a region with `.nds-p-horizontal_small`
 *
 * @selector .nds-grid_pull-padded-small
 * @modifier
 */
.nds-grid_pull-padded-small,
.nds-grid--pull-padded-small {
  margin: {
    #{$right}: ($spacing-small * -1);
    #{$left}: ($spacing-small * -1);
  }
}

/**
 * @summary Normalizes the 1rem of padding when nesting a grid in a region with `.nds-p-horizontal_medium`
 *
 * @selector .nds-grid_pull-padded-medium
 * @modifier
 */
.nds-grid_pull-padded-medium,
.nds-grid--pull-padded-medium {
  margin: {
    #{$right}: ($spacing-medium * -1);
    #{$left}: ($spacing-medium * -1);
  }
}

/**
 * @summary Normalizes the 1.5rem of padding when nesting a grid in a region with `.nds-p-horizontal_large`
 *
 * @selector .nds-grid_pull-padded-large
 * @modifier
 */
.nds-grid_pull-padded-large,
.nds-grid--pull-padded-large {
  margin: {
    #{$right}: ($spacing-large * -1);
    #{$left}: ($spacing-large * -1);
  }
}


/**
 * @summary Initializes a grid column
 *
 * @selector .nds-col
 * @modifier
 */
.nds-col,
[class*="nds-col_padded"],
[class*="nds-col--padded"] {
  @include flex-item(expand);
}

/**
 * @summary Adds border to top side of column
 *
 * @selector .nds-col_rule-top
 * @restrict .nds-col
 * @modifier
 */
.nds-col_rule-top,
.nds-col--rule-top {
  @include mq-large-min {
    border-top: 1px solid $color-border-separator;
  }
}

/**
 * @summary Adds border to right side of column
 *
 * @selector .nds-col_rule-right
 * @restrict .nds-col
 * @modifier
 */
.nds-col_rule-right,
.nds-col--rule-right {
  @include mq-large-min {
    border-#{$right}: 1px solid $color-border-separator;
  }
}

/**
 * @summary Adds border to bottom side of column
 *
 * @selector .nds-col_rule-bottom
 * @restrict .nds-col
 * @modifier
 */
.nds-col_rule-bottom,
.nds-col--rule-bottom {
  @include mq-large-min {
    border-bottom: 1px solid $color-border-separator;
  }
}

/**
 * @summary Adds border to left side of column
 *
 * @selector .nds-col_rule-left
 * @restrict .nds-col
 * @modifier
 */
.nds-col_rule-left,
.nds-col--rule-left {
  @include mq-large-min {
    border-#{$left}: 1px solid $color-border-separator;
  }
}

/**
 * @summary Needed when truncation is nested in a flexible container in a grid
 *
 * @selector .nds-has-flexi-truncate
 * @modifier
 */
.nds-has-flexi-truncate {
  flex: 1 1 0%;
  min-width: 0; // For FFOX and newer browsers
}

/**
 * @summary Removes flexbox from grid column
 *
 * @selector .nds-no-flex
 * @modifier
 */
.nds-no-flex {
  flex: none;
}

/**
 * @summary Sets the column to a min-width of 0
 *
 * @selector .nds-no-space
 * @modifier
 */
.nds-no-space {
  min-width: 0;
}

/**
 * @summary Allows column to grow to children&rsquo;s content
 *
 * @selector .nds-grow
 * @modifier
 */
.nds-grow {
  flex-grow: 1;
}

/**
 * @summary Prevents column from growing to children&rsquo;s content
 *
 * @selector .nds-grow-none
 * @modifier
 */
.nds-grow-none {
  flex-grow: 0;
}

/**
 * @summary Allows column to shrink to children's content
 *
 * @selector .nds-shrink
 * @modifier
 */
.nds-shrink {
  flex-shrink: 1;
}

/**
 * @summary Prevents column from shrinking to children's content
 *
 * @selector .nds-shrink-none
 * @modifier
 */
.nds-shrink-none {
  flex-shrink: 0;
}

// Resets spacing/bullets for when grids are used on unordered lists
.nds-text-longform ul.nds-grid {
  margin-#{$left}: 0;
  list-style: none;
}


@include deprecate('4.0.0', 'Use spacing utilities instead instead of .nds-col--padded-*') {

  .nds-col_padded,
  .nds-col--padded {
    padding: {
      #{$right}: $spacing-small;
      #{$left}: $spacing-small;
    }
  }

  .nds-col_padded-medium,
  .nds-col--padded-medium {
    padding: {
      #{$right}: $spacing-medium;
      #{$left}: $spacing-medium;
    }
  }

  .nds-col_padded-large,
  .nds-col--padded-large {
    padding: {
      #{$right}: $spacing-large;
      #{$left}: $spacing-large;
    }
  }

  .nds-col_padded-around,
  .nds-col--padded-around {
    padding: $spacing-small;
  }

  .nds-col_padded-around-medium,
  .nds-col--padded-around-medium {
    padding: $spacing-medium;
  }

  .nds-col_padded-around-large,
  .nds-col--padded-around-large {
    padding: $spacing-large;
  }
}

@include deprecate('4.0.0', 'Use .nds-col--rule-<position> instead of .nds-col-rule--*') {

  .nds-col-rule {
    @include mq-large-min {

      &_top,
      &--top {
        border-top: 1px solid $color-border-separator;
      }

      &_right,
      &--right {
        border-#{$right}: 1px solid $color-border-separator;
      }

      &_bottom,
      &--bottom {
        border-bottom: 1px solid $color-border-separator;
      }

      &_left,
      &--left {
        border-#{$left}: 1px solid $color-border-separator;
      }
    }
  }
}

/**
 * @summary Columns align in the center to the main axis and expand in each direction
 *
 * @selector .nds-grid_align-center
 * @modifier
 */
.nds-grid_align-center,
.nds-grid--align-center {
  justify-content: center;

  .nds-col,
  [class*="nds-col_padded"],
  [class*="nds-col--padded"] {
    flex-grow: 0;
  }
}

/**
 * @summary Columns are evenly distributed with equal space around them all
 *
 * @selector .nds-grid_align-space
 * @modifier
 */
.nds-grid_align-space,
.nds-grid--align-space {
  justify-content: space-around;

  .nds-col,
  [class*="nds-col_padded"],
  [class*="nds-col--padded"] {
    flex-grow: 0;
  }
}

/**
 * @summary Columns align to the left and right followed by center. Space is equal between them
 *
 * @selector .nds-grid_align-spread
 * @notes With only two columns &mdash; you can get a similar effect by setting one of the columns to `.nds-no-flex`
 * @modifier
 */
.nds-grid_align-spread,
.nds-grid--align-spread {
  justify-content: space-between;

  .nds-col,
  [class*="nds-col_padded"],
  [class*="nds-col--padded"] {
    flex-grow: 0;
  }
}

/**
 * @summary Columns start on the opposite end of the grid's main axis
 *
 * @selector .nds-grid_align-end
 * @modifier
 */
.nds-grid_align-end,
.nds-grid--align-end {
  justify-content: flex-end;

  .nds-col,
  [class*="nds-col_padded"],
  [class*="nds-col--padded"] {
    flex-grow: 0;
  }
}

/**
 * @summary Columns start at the beginning of the grid's cross axis
 *
 * @selector .nds-grid_vertical-align-start
 * @modifier
 */
.nds-grid_vertical-align-start,
.nds-grid--vertical-align-start {
  align-items: flex-start; // Single Row Alignment
  align-content: flex-start; // Multi Row Alignment
}

/**
 * @summary Columns align in the center to the cross axis and expand it each direction
 *
 * @selector .nds-grid_vertical-align-center
 * @modifier
 */
.nds-grid_vertical-align-center,
.nds-grid--vertical-align-center {
  align-items: center; // Single Row Alignment
  align-content: center; // Multi Row Alignment
}

/**
 * @summary Columns start on the opposite end of the grid's cross axis
 *
 * @selector .nds-grid_vertical-align-end
 * @modifier
 */
.nds-grid_vertical-align-end,
.nds-grid--vertical-align-end {
  align-items: flex-end; // Single Row Alignment
  align-content: flex-end; // Multi Row Alignment
}

/**
 * @summary Vertically aligns element to top of `.nds-grid`
 *
 * @selector .nds-align-top
 * @modifier
 */
.nds-align-top {
  vertical-align: top;
  align-self: flex-start;
}

/**
 * @summary Vertically aligns element to middle of `.nds-grid`
 *
 * @selector .nds-align-middle
 * @modifier
 */
.nds-align-middle {
  vertical-align: middle;
  align-self: center;
}

/**
 * @summary Vertically aligns element to bottom of `.nds-grid`
 *
 * @selector .nds-align-bottom
 * @modifier
 */
.nds-align-bottom {
  vertical-align: bottom;
  align-self: flex-end;
}

.nds-align-content-center {
  @include deprecate('4.0.0') {
    flex: 1;
    align-self: center;
    justify-content: center;
  }
}

/**
 * @summary Bumps grid item(s) away from the other grid items to sit at the top, taking up the remaining white-space of the grid container
 *
 * @selector .nds-col_bump-top
 * @modifier
 */
.nds-col_bump-top,
.nds-col--bump-top {
  margin-top: auto;
}

/**
 * @summary Bumps grid item(s) away from the other grid items to sit to the right, taking up the remaining white-space of the grid container
 *
 * @selector .nds-col_bump-right
 * @modifier
 */
.nds-col_bump-right,
.nds-col--bump-right {
  margin-#{$right}: auto;
}

/**
 * @summary Bumps grid item(s) away from the other grid items to sit at the bottom, taking up the remaining white-space of the grid container
 *
 * @selector .nds-col_bump-bottom
 * @modifier
 */
.nds-col_bump-bottom,
.nds-col--bump-bottom {
  margin-#{$right}: auto;
}

/**
 * @summary Bumps grid item(s) away from the other grid items to sit to the left, taking up the remaining white-space of the grid container
 *
 * @selector .nds-col_bump-left
 * @modifier
 */
.nds-col_bump-left,
.nds-col--bump-left {
  margin-#{$left}: auto;
}


/**
 * @summary Stretch the grid items for both single row and multi-line rows to fill the height of the parent grid container
 *
 * @selector .nds-grid_vertical-stretch
 * @notes Grid items will stretch the height of the parent grid container by default, unless `&lt;wrap&gt;` is used
 * @modifier
 */
.nds-grid_vertical-stretch,
.nds-grid--vertical-stretch {
  align-items: stretch; // Single Row Alignment
  align-content: stretch; // Multi Row Alignment
}

/**
 * @summary Restrict width of containers to a maximum of 480px
 *
 * @selector .nds-container_small
 * @modifier
 */
.nds-container_small,
.nds-container--small {
  max-width: rem($mq-small);
}

/**
 * @summary Restrict width of containers to a maximum of 768px
 *
 * @selector .nds-container_medium
 * @modifier
 */
.nds-container_medium,
.nds-container--medium {
  max-width: rem($mq-medium);
}

/**
 * @summary Restrict width of containers to a maximum of 1024px
 *
 * @selector .nds-container_large
 * @modifier
 */
.nds-container_large,
.nds-container--large {
  max-width: rem($mq-large);
}

/**
 * @summary Restrict width of containers to a maximum of 1280px
 *
 * @selector .nds-container_large
 * @modifier
 */
.nds-container_x-large,
.nds-container--x-large {
  max-width: rem($mq-x-large);
}

/**
 * @summary Width of container takes up 100% of viewport
 *
 * @selector .nds-container_fluid
 * @modifier
 */
.nds-container_fluid,
.nds-container--fluid {
  width: 100%;
}

/**
 * @summary Horizontally positions containers in the center of the viewport
 *
 * @selector .nds-container_center
 * @modifier
 */
.nds-container_center,
.nds-container--center {
  margin: {
    #{$left}: auto;
    #{$right}: auto;
  }
}

/**
 * @summary Horizontally positions containers to the left of the viewport
 *
 * @selector .nds-container_left
 * @modifier
 */
.nds-container_left,
.nds-container--left {
  margin-#{$right}: auto;
}

/**
 * @summary Horizontally positions containers to the right of the viewport
 *
 * @selector .nds-container_right
 * @modifier
 */
.nds-container_right,
.nds-container--right {
  margin-#{$left}: auto;
}

.nds-grid_overflow,
.nds-grid--overflow {
  flex-flow: row nowrap;

  .nds-col {
    min-width: 11.25em; // equals 180px
    max-width: 22.5em;
  }
}
