/* stylelint-disable declaration-no-important */
// Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
// Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license


/**
 * @summary Hides an element yet enables a screen reader to read the element that is hidden
 *
 * @selector .nds-assistive-text
 * @notes This should be used over other methods when you don't want to hide from screenreaders
 * @modifier
 */
.nds-assistive-text {
  // scss-lint:disable ImportantRule
  position: absolute !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  width: 1px !important;
  height: 1px !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
  text-transform: none !important;
  white-space: nowrap !important; // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
}

/**
 * @summary Enables `.nds-assistive-text` to become visible on focus
 *
 * @selector .nds-assistive-text_focus
 * @restrict .nds-assistive-text
 * @modifier
 */
.nds-assistive-text_focus,
.nds-assistive-text--focus {
  // scss-lint:disable ImportantRule
  &:focus {
    margin: inherit !important;
    border: inherit !important;
    padding: inherit !important;
    width: auto !important;
    height: auto !important;
    overflow: visible !important;
    clip: auto !important;
  }
}

/**
 * @summary Hides elements inside a parent
 *
 * @selector .nds-is-collapsed
 * @modifier
 */
.nds-is-collapsed {
  height: 0;
  overflow: hidden;
}

.nds-collapsed {
  @include deprecate('4.0.0') {
    height: 0;
    overflow: hidden;
  }
}

/**
 * @summary Shows the elements inside the parent
 *
 * @selector .nds-is-collapsed
 * @modifier
 */
.nds-is-expanded {
  height: auto;
  overflow: visible;
}

.nds-expanded {
  @include deprecate('4.0.0') {
    height: auto;
    overflow: visible;
  }
}

/**
 * @summary Hides an element from the page by setting the visibility property to `hidden`
 *
 * @selector .nds-hidden
 * @notes An element hidden with this class will reserve the normal space on the page and will not be announced by screenreaders.
 * @modifier
 */
.nds-hidden {
  visibility: hidden;
}

/**
 * @summary Shows the element by setting the visibility property to `visible`
 *
 * @selector .nds-visible
 * @notes This is toggled on the element. `.nds-hidden` class is removed and `.nds-visible` is added.
 * @modifier
 */
.nds-visible {
  visibility: visible; // @TODO - This may need !important;
}

/**
 * @summary Hides an element from the page by setting display propery to `none`
 *
 * @selector .nds-hide
 * @notes An element hidden with this class will take up no space on the page and will not be announced by screenreaders.
 * @modifier
 */
.nds-hide {
  display: none;
}

/**
 * @summary Shows the element by setting display property to `block`
 *
 * @selector .nds-show
 * @notes This is toggled on the element. `.nds-hide` class is removed and `.nds-show` is added.
 * @modifier
 */
.nds-show {
  display: block;
}

/**
 * @summary Shows the element by setting display to `inline-block`
 *
 * @selector .nds-show_inline-block
 * @notes This is toggled on the element. `.nds-hide` class is removed and `.nds-show--inline-block` is added.
 * @modifier
 */
.nds-show_inline-block,
.nds-show--inline-block {
  display: inline-block;
}

/**
 * @summary Shows the element by setting display to `inline`
 *
 * @selector .nds-show_inline
 * @notes This is toggled on the element. `.nds-hide` class is removed and `.nds-show--inline` is added.
 * @modifier
 */
.nds-show_inline,
.nds-show--inline {
  display: inline;
}

/**
 * @summary Hides an element from the page by setting the opacity property set to `0`
 *
 * @selector .transition-hide
 * @notes This works like the `.nds-hidden` class and reserves the space but allows you to add the `transition` property to transition the speed that it is shown or hidden.
 * @modifier
 */
.nds-transition-hide {
  opacity: 0;
}

/**
 * @summary Shows the element using the opacity property set to `1`
 *
 * @selector .transition-show
 * @notes This is toggled on the element. `.nds-transition-hide` class is removed and `.nds-transition-show` is added.
 * @modifier
 */
.nds-transition-show {
  opacity: 1;
}

@include visibility(x-small, $mq-x-small, $mq-small);
@include visibility(small, $mq-small, $mq-medium);
@include visibility(medium, $mq-medium, $mq-large);
@include visibility(large, $mq-large);

// Generates responsive visibility tags
@each $key, $value in (
  'x-small': $mq-x-small,
  'small': $mq-small,
  'medium': $mq-medium,
  'large': $mq-large,
  'x-large': $mq-x-large,
) {
  @media(min-width: $value) {
    /**
     * @summary Hides the element when the window is bigger than the specific size. Sizes can be: x-small, small, medium, large, and * x-large.
     *
     * @selector .nds-hide_*
     * @notes Element will be displayed normally when the window is smaller
     * @modifier
     */
    .nds-hide_#{$key},
    .nds-hide--#{$key} {
      // scss-lint:disable ImportantRule
      display: none !important;
    }
  }

  @media(max-width: $value - 1px) {
    /**
     * @summary Shows the element when the window is bigger than the specific size. Sizes can be: x-small, small, medium, large, and * x-large.
     *
     * @selector .nds-show_*
     * @notes Element will be displayed normally when the window is bigger
     * @modifier
     */
    .nds-show_#{$key},
    .nds-show--#{$key} {
      // scss-lint:disable ImportantRule
      display: none !important;
    }
  }
}
